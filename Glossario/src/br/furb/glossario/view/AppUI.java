/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package br.furb.glossario.view;

import br.furb.glossario.model.Glossario;
import br.furb.glossario.model.Termo;
import br.furb.glossario.model.Local;
import br.furb.glossario.model.Obra;
import br.furb.glossario.model.Personagem;
import br.furb.glossario.model.data.IO;
import java.io.IOException;
import java.util.ArrayList;

/**
 *
 * @author anaj2
 */
public class AppUI extends javax.swing.JFrame {

    private Glossario glossario = new Glossario();
    
    /**
     * Creates new form AppUI
     */
    public AppUI() {
        try {
            glossario = (Glossario)IO.readData();
        }
        catch (IOException e) {
        }
        
        initComponents();
    }
    
    protected void addTermos(ArrayList<Termo> termos) {
        glossario.addTermos(termos);
    }
    
    protected Glossario getGlossario() {
        return glossario;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pnlTermos = new javax.swing.JPanel();
        txtPesquisaTermo = new javax.swing.JTextField();
        btnPesquisar = new javax.swing.JButton();
        cmbTipoListagem = new javax.swing.JComboBox<>();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblTermos = new javax.swing.JTable();
        menuBar = new javax.swing.JMenuBar();
        menuAdicionar = new javax.swing.JMenu();
        mniNovoTermo = new javax.swing.JMenuItem();
        mniNovoPersonagem = new javax.swing.JMenuItem();
        nmiNovoLocal = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowActivated(java.awt.event.WindowEvent evt) {
                formWindowActivated(evt);
            }
        });

        pnlTermos.setBorder(javax.swing.BorderFactory.createTitledBorder("Termos"));

        txtPesquisaTermo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtPesquisaTermoActionPerformed(evt);
            }
        });

        btnPesquisar.setText("Pesquisar");
        btnPesquisar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPesquisarActionPerformed(evt);
            }
        });

        cmbTipoListagem.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Todos", "Personagem", "Local", "Outros" }));
        cmbTipoListagem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbTipoListagemActionPerformed(evt);
            }
        });

        tblTermos.setAutoCreateRowSorter(true);
        tblTermos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Tipo", "Termo", "Descrição", "História", "Caracteristicas", "Feitos", "Atores", "Obras"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        javax.swing.table.DefaultTableModel model = new javax.swing.table.DefaultTableModel(new String [] {
            "Tipo", "Termo", "Descrição", "História", "Caracteristicas", "Feitos", "Atores", "Obras"
        }, 0);

        for (Termo termo : listarTermos()) {
            boolean isLocal = termo instanceof Local;
            boolean isPersonagem = termo instanceof Personagem;
            ArrayList<String> obras = new ArrayList<>();

            for (Obra obra : termo.getObras())
            obras.add(obra.toString());

            Object[] obj = new Object[] {
                termo.getTipoTermoString(),
                termo.getNome(),
                termo.getDescricao(),
                isLocal ? ((Local)termo).getHistoria() : "",
                isPersonagem ? ((Personagem)termo).getCaracteristica() : "",
                isPersonagem ? ((Personagem)termo).getFeitos() : "",
                isPersonagem ? String.join(" - ", ((Personagem)termo).getAtores()) : "",
                obras.size() > 0 ? String.join("; ", obras) : "Não possui obra vinculada"
            };

            model.addRow(obj);
        }

        tblTermos.setModel(model);
        tblTermos.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_ALL_COLUMNS);
        tblTermos.setEditingColumn(0);
        tblTermos.setEditingRow(0);
        tblTermos.setShowGrid(false);
        jScrollPane2.setViewportView(tblTermos);
        if (tblTermos.getColumnModel().getColumnCount() > 0) {
            tblTermos.getColumnModel().getColumn(7).setMinWidth(200);
            tblTermos.getColumnModel().getColumn(7).setPreferredWidth(200);
        }

        javax.swing.GroupLayout pnlTermosLayout = new javax.swing.GroupLayout(pnlTermos);
        pnlTermos.setLayout(pnlTermosLayout);
        pnlTermosLayout.setHorizontalGroup(
            pnlTermosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlTermosLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlTermosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2)
                    .addGroup(pnlTermosLayout.createSequentialGroup()
                        .addComponent(txtPesquisaTermo, javax.swing.GroupLayout.PREFERRED_SIZE, 721, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 30, Short.MAX_VALUE)
                        .addComponent(cmbTipoListagem, javax.swing.GroupLayout.PREFERRED_SIZE, 274, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(28, 28, 28)
                        .addComponent(btnPesquisar, javax.swing.GroupLayout.PREFERRED_SIZE, 157, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        pnlTermosLayout.setVerticalGroup(
            pnlTermosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlTermosLayout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addGroup(pnlTermosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtPesquisaTermo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cmbTipoListagem, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnPesquisar))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 459, Short.MAX_VALUE)
                .addContainerGap())
        );

        menuAdicionar.setText("Adicionar");

        mniNovoTermo.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_N, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        mniNovoTermo.setText("Novo Termo");
        mniNovoTermo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mniNovoTermoActionPerformed(evt);
            }
        });
        menuAdicionar.add(mniNovoTermo);

        mniNovoPersonagem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_P, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        mniNovoPersonagem.setText("Novo Persoangem");
        mniNovoPersonagem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mniNovoPersonagemActionPerformed(evt);
            }
        });
        menuAdicionar.add(mniNovoPersonagem);

        nmiNovoLocal.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_L, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        nmiNovoLocal.setText("Novo Local");
        nmiNovoLocal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nmiNovoLocalActionPerformed(evt);
            }
        });
        menuAdicionar.add(nmiNovoLocal);

        menuBar.add(menuAdicionar);

        setJMenuBar(menuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(6, 6, 6)
                .addComponent(pnlTermos, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(pnlTermos, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(6, 6, 6))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private ArrayList<Termo> listarTermos() {
        return glossario.getTermos();
    }
    
    private ArrayList<Termo> listarTermos(EnumTipoListagem tipo, String texto) {
        var termos = glossario.getTermos();
        ArrayList<Termo> termosListado = new ArrayList<>();
        
        if (tipo == EnumTipoListagem.PERSONAGEM) {            
            for (Termo termo : termos) {
                if (termo instanceof Personagem && termo.getNome().contains(texto))
                    termosListado.add(termo);
            }
        }
        else if (tipo == EnumTipoListagem.LOCAL) {
            for (Termo termo : termos) {
                if (termo instanceof Local && termo.getNome().contains(texto))
                    termosListado.add(termo);
            }
        }
        else if (tipo == EnumTipoListagem.OUTROS) {
            for (Termo termo : termos) {
                if (!(termo instanceof Local) && !(termo instanceof Personagem) && termo.getNome().contains(texto))
                    termosListado.add(termo);
            }
        }
        else {
            for (Termo termo : termos) {
                if (termo.getNome().contains(texto))
                    termosListado.add(termo);
            }
        }
        
        return termosListado;
    }
    
    private void atualizarGrid() {
        EnumTipoListagem tipo = EnumTipoListagem.valueOf(cmbTipoListagem.getSelectedItem().toString().toUpperCase());
        var termos = listarTermos(tipo, txtPesquisaTermo.getText());    
        
        javax.swing.table.DefaultTableModel model = new javax.swing.table.DefaultTableModel(new String [] {
            "Tipo", "Termo", "Descrição", "História", "Caracteristicas", "Feitos", "Atores", "Obras"
        }, 0);

        for (Termo termo : termos) {
            boolean isLocal = termo instanceof Local;
            boolean isPersonagem = termo instanceof Personagem;
            ArrayList<String> obras = new ArrayList<>();

            for (Obra obra : termo.getObras())
            obras.add(obra.toString());

            Object[] obj = new Object[] {
                termo.getTipoTermoString(),
                termo.getNome(),
                termo.getDescricao(),
                isLocal ? ((Local)termo).getHistoria() : "",
                isPersonagem ? ((Personagem)termo).getCaracteristica() : "",
                isPersonagem ? ((Personagem)termo).getFeitos() : "",
                isPersonagem ? String.join(" - ", ((Personagem)termo).getAtores()) : "",
                !obras.isEmpty() ? String.join("; ", obras) : "Não possui obra vinculada"
            };

            model.addRow(obj);
        }

        tblTermos.setModel(model);
        
    }
    
    private void txtPesquisaTermoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtPesquisaTermoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtPesquisaTermoActionPerformed

    private void btnPesquisarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPesquisarActionPerformed
        atualizarGrid();
    }//GEN-LAST:event_btnPesquisarActionPerformed

    private void nmiNovoLocalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nmiNovoLocalActionPerformed
        AppAddTermoLocal dialog = new AppAddTermoLocal(this, true);
        dialog.setVisible(true);
    }//GEN-LAST:event_nmiNovoLocalActionPerformed

    private void mniNovoTermoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mniNovoTermoActionPerformed
        AppAddTermoBasico dialog = new AppAddTermoBasico(this, true);
        dialog.setVisible(true);
    }//GEN-LAST:event_mniNovoTermoActionPerformed

    private void mniNovoPersonagemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mniNovoPersonagemActionPerformed
        AppAddTermoPersonagem dialog = new AppAddTermoPersonagem(this, true);
        dialog.setVisible(true);
    }//GEN-LAST:event_mniNovoPersonagemActionPerformed

    private void cmbTipoListagemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbTipoListagemActionPerformed
        atualizarGrid();
    }//GEN-LAST:event_cmbTipoListagemActionPerformed

    private void formWindowActivated(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowActivated
        atualizarGrid();
    }//GEN-LAST:event_formWindowActivated

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AppUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AppUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AppUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AppUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new AppUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnPesquisar;
    private javax.swing.JComboBox<String> cmbTipoListagem;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JMenu menuAdicionar;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JMenuItem mniNovoPersonagem;
    private javax.swing.JMenuItem mniNovoTermo;
    private javax.swing.JMenuItem nmiNovoLocal;
    private javax.swing.JPanel pnlTermos;
    private javax.swing.JTable tblTermos;
    private javax.swing.JTextField txtPesquisaTermo;
    // End of variables declaration//GEN-END:variables
}
